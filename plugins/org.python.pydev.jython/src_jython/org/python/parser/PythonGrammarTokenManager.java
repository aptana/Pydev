/* Generated By:JJTree&JavaCC: Do not edit this line. PythonGrammarTokenManager.java */
package org.python.parser;

public class PythonGrammarTokenManager implements PythonGrammarConstants {
    int indentation[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int level = 0;
    int dedents = 0;
    int parens = 0;
    int indent;

    boolean expect_indent = false;

    boolean compound = false;

    public boolean single_input = false;

    // parsing of partial sentence (interactive) mode
    public boolean partial = false;
    // control whether empty new lines on EOF force sentence closing NEWLINE even if indent
    // is expected,i.e. classic behavior at jython prompt (different from codeop behavior)
    public boolean stdprompt = false;

    public boolean generator_allowed = false;

    static Token addDedent(Token previous) {
        Token t = new Token();
        t.kind = DEDENT;
        t.beginLine = previous.beginLine;
        t.endLine = previous.endLine;
        t.beginColumn = previous.beginColumn;
        t.endColumn = previous.endColumn;
        t.image = "<DEDENT>";
        t.specialToken = null;
        t.next = null;
        previous.next = t;
        return t;
    }

    void CommonTokenAction(Token t) {
        /*
           if not partial: EOF is expanded to token sequences comprising
               if single_input: [NEWLINE] necessary DEDENT NEWLINE (afterward EOF)
               otherwise      : [NEWLINE] necessary DEDENT EOF
           if partial: EOF expansion happens only if EOF preceded by empty line (etc),
           i.e. lexer is in MAYBE_FORCE_NEWLINE_IF_EOF state
        */
        if (t.kind == EOF) {
            // System.out.println("EOF: "+single_input+", "+curLexState+", "+level);
            if (!partial || curLexState == MAYBE_FORCE_NEWLINE_IF_EOF) {
                if (curLexState == DEFAULT) {
                    t.kind = NEWLINE;
                } else {
                    t.kind = DEDENT;
                    if (level >= 0)
                        level -= 1;
                }
                while (level >= 0) {
                    level--;
                    t = addDedent(t);
                }
                if (!single_input) {
                    t.kind = EOF;
                    t.image = "<EOF>";
                } else {
                    t.kind = NEWLINE;
                    t.image = "<FORCENL>";
                    single_input = false;
                }
            }
        } else if (t.kind == YIELD) {
            if (!generator_allowed) {
                t.kind = NAME;
            }
        }
    }

    void indenting(int ind) {
        indent = ind;
        if (indent == indentation[level])
            SwitchTo(INDENTATION_UNCHANGED);
        else
            SwitchTo(INDENTING);
    }

    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_4(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_4(int pos, long active0) {
        return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_4(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_4(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_4() {
        switch (curChar) {
            case 9:
                return jjStopAtPos(0, 9);
            case 12:
                return jjStopAtPos(0, 11);
            case 32:
                return jjStopAtPos(0, 10);
            default:
                return jjMoveNfa_4(1, 0);
        }
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL };
    static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

    private final int jjMoveNfa_4(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 8;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 12)
                                    kind = 12;
                            } else if (curChar == 35)
                                jjCheckNAddStates(0, 2);
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 0:
                            if (curChar == 10 && kind > 12)
                                kind = 12;
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L && kind > 12)
                                kind = 12;
                            break;
                        case 3:
                            if (curChar == 35)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 4:
                            if ((0xffffffffffffdbffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 5:
                            if (curChar == 10 && kind > 17)
                                kind = 17;
                            break;
                        case 6:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 7:
                            if ((0x2400L & l) != 0L && kind > 17)
                                kind = 17;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 4:
                            jjAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 4:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_15() {
        return 1;
    }

    private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active1 & 0x4000000000000L) != 0L) {
                    jjmatchedKind = 133;
                    return -1;
                }
                return -1;
            case 1:
                if ((active1 & 0x4000000000000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 133;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_13(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1, active2), pos + 1);
    }

    private final int jjStartNfaWithStates_13(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_13(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_13() {
        switch (curChar) {
            case 10:
                return jjStopAtPos(0, 131);
            case 13:
                jjmatchedKind = 132;
                return jjMoveStringLiteralDfa1_13(0x0L, 0x4L);
            case 39:
                return jjMoveStringLiteralDfa1_13(0x4000000000000L, 0x0L);
            default:
                return jjMoveNfa_13(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_13(long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_13(0, 0L, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active2 & 0x4L) != 0L)
                    return jjStopAtPos(1, 130);
                break;
            case 39:
                return jjMoveStringLiteralDfa2_13(active1, 0x4000000000000L, active2, 0L);
            default:
                break;
        }
        return jjStartNfa_13(0, 0L, active1, active2);
    }

    private final int jjMoveStringLiteralDfa2_13(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_13(0, 0L, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_13(1, 0L, active1, 0L);
            return 2;
        }
        switch (curChar) {
            case 39:
                if ((active1 & 0x4000000000000L) != 0L)
                    return jjStopAtPos(2, 114);
                break;
            default:
                break;
        }
        return jjStartNfa_13(1, 0L, active1, 0L);
    }

    private final int jjMoveNfa_13(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 133)
                                kind = 133;
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 2:
                            if (kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active1 & 0x100000000000000L) != 0L) {
                    jjmatchedKind = 128;
                    return 2;
                }
                return -1;
            case 1:
                if ((active1 & 0x100000000000000L) != 0L) {
                    jjmatchedKind = 121;
                    jjmatchedPos = 1;
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_11(int pos, long active0, long active1) {
        return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
    }

    private final int jjStartNfaWithStates_11(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_11(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_11() {
        switch (curChar) {
            case 39:
                return jjStopAtPos(0, 112);
            case 92:
                return jjMoveStringLiteralDfa1_11(0x100000000000000L);
            default:
                return jjMoveNfa_11(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_11(long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_11(0, 0L, active1);
            return 1;
        }
        switch (curChar) {
            case 13:
                return jjMoveStringLiteralDfa2_11(active1, 0x100000000000000L);
            default:
                break;
        }
        return jjStartNfa_11(0, 0L, active1);
    }

    private final int jjMoveStringLiteralDfa2_11(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_11(0, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_11(1, 0L, active1);
            return 2;
        }
        switch (curChar) {
            case 10:
                if ((active1 & 0x100000000000000L) != 0L)
                    return jjStopAtPos(2, 120);
                break;
            default:
                break;
        }
        return jjStartNfa_11(1, 0L, active1);
    }

    private final int jjMoveNfa_11(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 4;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 128)
                                kind = 128;
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 121)
                                    kind = 121;
                            } else if (curChar == 39) {
                                if (kind > 128)
                                    kind = 128;
                            }
                            break;
                        case 3:
                            if (curChar == 39 && kind > 128)
                                kind = 128;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 128)
                                kind = 128;
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        case 2:
                            if (curChar == 92 && kind > 128)
                                kind = 128;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 128)
                                kind = 128;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_16() {
        return 1;
    }

    private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active1 & 0x800000000000L) != 0L) {
                    jjmatchedKind = 133;
                    return -1;
                }
                return -1;
            case 1:
                if ((active1 & 0x800000000000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 133;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_10(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2), pos + 1);
    }

    private final int jjStartNfaWithStates_10(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_10(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_10() {
        switch (curChar) {
            case 10:
                return jjStopAtPos(0, 131);
            case 13:
                jjmatchedKind = 132;
                return jjMoveStringLiteralDfa1_10(0x0L, 0x4L);
            case 34:
                return jjMoveStringLiteralDfa1_10(0x800000000000L, 0x0L);
            default:
                return jjMoveNfa_10(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_10(long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_10(0, 0L, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active2 & 0x4L) != 0L)
                    return jjStopAtPos(1, 130);
                break;
            case 34:
                return jjMoveStringLiteralDfa2_10(active1, 0x800000000000L, active2, 0L);
            default:
                break;
        }
        return jjStartNfa_10(0, 0L, active1, active2);
    }

    private final int jjMoveStringLiteralDfa2_10(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_10(0, 0L, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_10(1, 0L, active1, 0L);
            return 2;
        }
        switch (curChar) {
            case 34:
                if ((active1 & 0x800000000000L) != 0L)
                    return jjStopAtPos(2, 111);
                break;
            default:
                break;
        }
        return jjStartNfa_10(1, 0L, active1, 0L);
    }

    private final int jjMoveNfa_10(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 133)
                                kind = 133;
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 2:
                            if (kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active1 & 0x40000000000000L) != 0L) {
                    jjmatchedKind = 129;
                    return 2;
                }
                return -1;
            case 1:
                if ((active1 & 0x40000000000000L) != 0L) {
                    jjmatchedKind = 119;
                    jjmatchedPos = 1;
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_8(int pos, long active0, long active1) {
        return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
    }

    private final int jjStartNfaWithStates_8(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_8(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_8() {
        switch (curChar) {
            case 34:
                return jjStopAtPos(0, 109);
            case 92:
                return jjMoveStringLiteralDfa1_8(0x40000000000000L);
            default:
                return jjMoveNfa_8(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_8(long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_8(0, 0L, active1);
            return 1;
        }
        switch (curChar) {
            case 13:
                return jjMoveStringLiteralDfa2_8(active1, 0x40000000000000L);
            default:
                break;
        }
        return jjStartNfa_8(0, 0L, active1);
    }

    private final int jjMoveStringLiteralDfa2_8(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_8(0, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_8(1, 0L, active1);
            return 2;
        }
        switch (curChar) {
            case 10:
                if ((active1 & 0x40000000000000L) != 0L)
                    return jjStopAtPos(2, 118);
                break;
            default:
                break;
        }
        return jjStartNfa_8(1, 0L, active1);
    }

    private final int jjMoveNfa_8(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 4;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 129)
                                kind = 129;
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 119)
                                    kind = 119;
                            } else if (curChar == 34) {
                                if (kind > 129)
                                    kind = 129;
                            }
                            break;
                        case 3:
                            if (curChar == 34 && kind > 129)
                                kind = 129;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 129)
                                kind = 129;
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        case 2:
                            if (curChar == 92 && kind > 129)
                                kind = 129;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 129)
                                kind = 129;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active1 & 0x8000000000000L) != 0L) {
                    jjmatchedKind = 133;
                    return -1;
                }
                return -1;
            case 1:
                if ((active1 & 0x8000000000000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 133;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_14(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1, active2), pos + 1);
    }

    private final int jjStartNfaWithStates_14(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_14(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_14() {
        switch (curChar) {
            case 10:
                return jjStopAtPos(0, 131);
            case 13:
                jjmatchedKind = 132;
                return jjMoveStringLiteralDfa1_14(0x0L, 0x4L);
            case 34:
                return jjMoveStringLiteralDfa1_14(0x8000000000000L, 0x0L);
            default:
                return jjMoveNfa_14(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_14(long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_14(0, 0L, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active2 & 0x4L) != 0L)
                    return jjStopAtPos(1, 130);
                break;
            case 34:
                return jjMoveStringLiteralDfa2_14(active1, 0x8000000000000L, active2, 0L);
            default:
                break;
        }
        return jjStartNfa_14(0, 0L, active1, active2);
    }

    private final int jjMoveStringLiteralDfa2_14(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_14(0, 0L, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_14(1, 0L, active1, 0L);
            return 2;
        }
        switch (curChar) {
            case 34:
                if ((active1 & 0x8000000000000L) != 0L)
                    return jjStopAtPos(2, 115);
                break;
            default:
                break;
        }
        return jjStartNfa_14(1, 0L, active1, 0L);
    }

    private final int jjMoveNfa_14(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 133)
                                kind = 133;
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 2:
                            if (kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active1 & 0x400000000000000L) != 0L) {
                    jjmatchedKind = 129;
                    return 2;
                }
                return -1;
            case 1:
                if ((active1 & 0x400000000000000L) != 0L) {
                    jjmatchedKind = 123;
                    jjmatchedPos = 1;
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_12(int pos, long active0, long active1) {
        return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
    }

    private final int jjStartNfaWithStates_12(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_12(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_12() {
        switch (curChar) {
            case 34:
                return jjStopAtPos(0, 113);
            case 92:
                return jjMoveStringLiteralDfa1_12(0x400000000000000L);
            default:
                return jjMoveNfa_12(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_12(long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_12(0, 0L, active1);
            return 1;
        }
        switch (curChar) {
            case 13:
                return jjMoveStringLiteralDfa2_12(active1, 0x400000000000000L);
            default:
                break;
        }
        return jjStartNfa_12(0, 0L, active1);
    }

    private final int jjMoveStringLiteralDfa2_12(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_12(0, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_12(1, 0L, active1);
            return 2;
        }
        switch (curChar) {
            case 10:
                if ((active1 & 0x400000000000000L) != 0L)
                    return jjStopAtPos(2, 122);
                break;
            default:
                break;
        }
        return jjStartNfa_12(1, 0L, active1);
    }

    private final int jjMoveNfa_12(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 4;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 129)
                                kind = 129;
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 123)
                                    kind = 123;
                            } else if (curChar == 34) {
                                if (kind > 129)
                                    kind = 129;
                            }
                            break;
                        case 3:
                            if (curChar == 34 && kind > 129)
                                kind = 129;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 129)
                                kind = 129;
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        case 2:
                            if (curChar == 92 && kind > 129)
                                kind = 129;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 129)
                                kind = 129;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_17() {
        return 1;
    }

    private final int jjStopStringLiteralDfa_5(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_5(int pos, long active0) {
        return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_5(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_5(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_5() {
        switch (curChar) {
            case 9:
                return jjStopAtPos(0, 9);
            case 12:
                return jjStopAtPos(0, 11);
            case 32:
                return jjStopAtPos(0, 10);
            default:
                return jjMoveNfa_5(1, 0);
        }
    }

    private final int jjMoveNfa_5(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 8;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 12)
                                    kind = 12;
                            } else if (curChar == 35)
                                jjCheckNAddStates(0, 2);
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 0:
                            if (curChar == 10 && kind > 12)
                                kind = 12;
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L && kind > 12)
                                kind = 12;
                            break;
                        case 3:
                            if (curChar == 35)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 4:
                            if ((0xffffffffffffdbffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 5:
                            if (curChar == 10 && kind > 17)
                                kind = 17;
                            break;
                        case 6:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 7:
                            if ((0x2400L & l) != 0L && kind > 17)
                                kind = 17;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 4:
                            jjAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 4:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_6() {
        switch (curChar) {
            case 60:
                return jjMoveStringLiteralDfa1_6(0x8000L);
            default:
                return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_6(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 73:
                return jjMoveStringLiteralDfa2_6(active0, 0x8000L);
            default:
                return 2;
        }
    }

    private final int jjMoveStringLiteralDfa2_6(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return 2;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 2;
        }
        switch (curChar) {
            case 78:
                return jjMoveStringLiteralDfa3_6(active0, 0x8000L);
            default:
                return 3;
        }
    }

    private final int jjMoveStringLiteralDfa3_6(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return 3;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 3;
        }
        switch (curChar) {
            case 68:
                return jjMoveStringLiteralDfa4_6(active0, 0x8000L);
            default:
                return 4;
        }
    }

    private final int jjMoveStringLiteralDfa4_6(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return 4;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 4;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa5_6(active0, 0x8000L);
            default:
                return 5;
        }
    }

    private final int jjMoveStringLiteralDfa5_6(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return 5;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 5;
        }
        switch (curChar) {
            case 78:
                return jjMoveStringLiteralDfa6_6(active0, 0x8000L);
            default:
                return 6;
        }
    }

    private final int jjMoveStringLiteralDfa6_6(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return 6;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 6;
        }
        switch (curChar) {
            case 84:
                return jjMoveStringLiteralDfa7_6(active0, 0x8000L);
            default:
                return 7;
        }
    }

    private final int jjMoveStringLiteralDfa7_6(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return 7;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 7;
        }
        switch (curChar) {
            case 62:
                if ((active0 & 0x8000L) != 0L)
                    return jjStopAtPos(7, 15);
                break;
            default:
                return 8;
        }
        return 8;
    }

    private final int jjMoveStringLiteralDfa0_3() {
        return 1;
    }

    private final int jjMoveStringLiteralDfa0_18() {
        return 1;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x7bdffffL) != 0L) {
                    jjmatchedKind = 91;
                    return 10;
                }
                if ((active0 & 0x4000000L) != 0L)
                    return 78;
                if ((active1 & 0x420000L) != 0L) {
                    jjmatchedKind = 91;
                    return 79;
                }
                return -1;
            case 1:
                if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x600000bL) != 0L)
                    return 10;
                if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x1fffff4L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 91;
                        jjmatchedPos = 1;
                    }
                    return 10;
                }
                return -1;
            case 2:
                if ((active1 & 0x3dffa74L) != 0L) {
                    jjmatchedKind = 91;
                    jjmatchedPos = 2;
                    return 10;
                }
                if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x200580L) != 0L)
                    return 10;
                return -1;
            case 3:
                if ((active1 & 0x1104030L) != 0L)
                    return 10;
                if ((active1 & 0x2cfba44L) != 0L) {
                    jjmatchedKind = 91;
                    jjmatchedPos = 3;
                    return 10;
                }
                return -1;
            case 4:
                if ((active1 & 0x44a840L) != 0L)
                    return 10;
                if ((active1 & 0x28b1204L) != 0L) {
                    jjmatchedKind = 91;
                    jjmatchedPos = 4;
                    return 10;
                }
                return -1;
            case 5:
                if ((active1 & 0x28a0204L) != 0L)
                    return 10;
                if ((active1 & 0x11000L) != 0L) {
                    jjmatchedKind = 91;
                    jjmatchedPos = 5;
                    return 10;
                }
                return -1;
            case 6:
                if ((active1 & 0x1000L) != 0L)
                    return 10;
                if ((active1 & 0x10000L) != 0L) {
                    jjmatchedKind = 91;
                    jjmatchedPos = 6;
                    return 10;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
            case 37:
                jjmatchedKind = 36;
                return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
            case 38:
                jjmatchedKind = 40;
                return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
            case 40:
                return jjStopAtPos(0, 18);
            case 41:
                return jjStopAtPos(0, 19);
            case 42:
                jjmatchedKind = 30;
                return jjMoveStringLiteralDfa1_0(0x1008000200000000L, 0x0L);
            case 43:
                jjmatchedKind = 28;
                return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
            case 44:
                return jjStopAtPos(0, 25);
            case 45:
                jjmatchedKind = 29;
                return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
            case 46:
                return jjStartNfaWithStates_0(0, 26, 78);
            case 47:
                jjmatchedKind = 31;
                return jjMoveStringLiteralDfa1_0(0x30000100000000L, 0x0L);
            case 58:
                return jjStopAtPos(0, 27);
            case 59:
                return jjStopAtPos(0, 24);
            case 60:
                jjmatchedKind = 43;
                return jjMoveStringLiteralDfa1_0(0x400a00400000000L, 0x0L);
            case 61:
                jjmatchedKind = 41;
                return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
            case 62:
                jjmatchedKind = 42;
                return jjMoveStringLiteralDfa1_0(0x800400800000000L, 0x0L);
            case 91:
                return jjStopAtPos(0, 22);
            case 93:
                return jjStopAtPos(0, 23);
            case 94:
                jjmatchedKind = 38;
                return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
            case 96:
                return jjStopAtPos(0, 135);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x6000000L);
            case 98:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x10800L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x200400L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1000230L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x101080L);
            case 103:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x8000bL);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
            case 111:
                return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x6000L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x420000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
            case 121:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
            case 123:
                return jjStopAtPos(0, 20);
            case 124:
                jjmatchedKind = 39;
                return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
            case 125:
                return jjStopAtPos(0, 21);
            case 126:
                return jjStopAtPos(0, 37);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, 0L);
            return 1;
        }
        switch (curChar) {
            case 42:
                if ((active0 & 0x200000000L) != 0L) {
                    jjmatchedKind = 33;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
            case 47:
                if ((active0 & 0x100000000L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
            case 60:
                if ((active0 & 0x400000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
            case 61:
                if ((active0 & 0x100000000000L) != 0L)
                    return jjStopAtPos(1, 44);
                else if ((active0 & 0x200000000000L) != 0L)
                    return jjStopAtPos(1, 45);
                else if ((active0 & 0x400000000000L) != 0L)
                    return jjStopAtPos(1, 46);
                else if ((active0 & 0x1000000000000L) != 0L)
                    return jjStopAtPos(1, 48);
                else if ((active0 & 0x2000000000000L) != 0L)
                    return jjStopAtPos(1, 49);
                else if ((active0 & 0x4000000000000L) != 0L)
                    return jjStopAtPos(1, 50);
                else if ((active0 & 0x8000000000000L) != 0L)
                    return jjStopAtPos(1, 51);
                else if ((active0 & 0x10000000000000L) != 0L)
                    return jjStopAtPos(1, 52);
                else if ((active0 & 0x40000000000000L) != 0L)
                    return jjStopAtPos(1, 54);
                else if ((active0 & 0x80000000000000L) != 0L)
                    return jjStopAtPos(1, 55);
                else if ((active0 & 0x100000000000000L) != 0L)
                    return jjStopAtPos(1, 56);
                else if ((active0 & 0x200000000000000L) != 0L)
                    return jjStopAtPos(1, 57);
                break;
            case 62:
                if ((active0 & 0x800000000L) != 0L) {
                    jjmatchedKind = 35;
                    jjmatchedPos = 1;
                } else if ((active0 & 0x800000000000L) != 0L)
                    return jjStopAtPos(1, 47);
                return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x404004L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x220400L);
            case 102:
                if ((active1 & 0x8L) != 0L)
                    return jjStartNfaWithStates_0(1, 67, 10);
                break;
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x41000L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800830L);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
            case 110:
                if ((active1 & 0x2L) != 0L)
                    return jjStartNfaWithStates_0(1, 65, 10);
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x10080L);
            case 114:
                if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 61, 10);
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10a100L);
            case 115:
                if ((active1 & 0x1L) != 0L)
                    return jjStartNfaWithStates_0(1, 64, 10);
                else if ((active1 & 0x4000000L) != 0L) {
                    jjmatchedKind = 90;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000200L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1, 0L);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(0, old0, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, 0L);
            return 2;
        }
        switch (curChar) {
            case 61:
                if ((active0 & 0x20000000000000L) != 0L)
                    return jjStopAtPos(2, 53);
                else if ((active0 & 0x400000000000000L) != 0L)
                    return jjStopAtPos(2, 58);
                else if ((active0 & 0x800000000000000L) != 0L)
                    return jjStopAtPos(2, 59);
                else if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStopAtPos(2, 60);
                break;
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
            case 100:
                if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 62, 10);
                break;
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1048000L);
            case 102:
                if ((active1 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(2, 74, 10);
                break;
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x402060L);
            case 108:
                if ((active1 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(2, 85, 10);
                break;
            case 109:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x11000L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x900000L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
            case 114:
                if ((active1 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(2, 71, 10);
                break;
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2004010L);
            case 116:
                if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 63, 10);
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
            case 121:
                if ((active1 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(2, 72, 10);
                break;
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1, 0L);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(1, old0, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, 0L, active1, 0L);
            return 3;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa4_0(active1, 0x9000L);
            case 98:
                return jjMoveStringLiteralDfa4_0(active1, 0x800004L);
            case 99:
                if ((active1 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 88, 10);
                break;
            case 101:
                if ((active1 & 0x10L) != 0L)
                    return jjStartNfaWithStates_0(3, 68, 10);
                return jjMoveStringLiteralDfa4_0(active1, 0x2000200L);
            case 102:
                if ((active1 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(3, 69, 10);
                break;
            case 108:
                return jjMoveStringLiteralDfa4_0(active1, 0x40040L);
            case 109:
                if ((active1 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(3, 84, 10);
                break;
            case 110:
                return jjMoveStringLiteralDfa4_0(active1, 0x2000L);
            case 111:
                return jjMoveStringLiteralDfa4_0(active1, 0x80000L);
            case 115:
                if ((active1 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(3, 78, 10);
                return jjMoveStringLiteralDfa4_0(active1, 0x400800L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active1, 0x10000L);
            case 117:
                return jjMoveStringLiteralDfa4_0(active1, 0x20000L);
            default:
                break;
        }
        return jjStartNfa_0(2, 0L, active1, 0L);
    }

    private final int jjMoveStringLiteralDfa4_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(2, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, 0L, active1, 0L);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_0(active1, 0x800000L);
            case 100:
                if ((active1 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(4, 82, 10);
                return jjMoveStringLiteralDfa5_0(active1, 0x4L);
            case 101:
                if ((active1 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(4, 70, 10);
                else if ((active1 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(4, 86, 10);
                break;
            case 105:
                return jjMoveStringLiteralDfa5_0(active1, 0x10000L);
            case 107:
                if ((active1 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(4, 79, 10);
                break;
            case 108:
                return jjMoveStringLiteralDfa5_0(active1, 0x1000L);
            case 112:
                return jjMoveStringLiteralDfa5_0(active1, 0x200L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active1, 0x20a0000L);
            case 115:
                if ((active1 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(4, 75, 10);
                break;
            case 116:
                if ((active1 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(4, 77, 10);
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, 0L, active1, 0L);
    }

    private final int jjMoveStringLiteralDfa5_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(3, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, 0L, active1, 0L);
            return 5;
        }
        switch (curChar) {
            case 97:
                if ((active1 & 0x4L) != 0L)
                    return jjStartNfaWithStates_0(5, 66, 10);
                break;
            case 108:
                if ((active1 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(5, 87, 10);
                return jjMoveStringLiteralDfa6_0(active1, 0x1000L);
            case 110:
                if ((active1 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(5, 81, 10);
                return jjMoveStringLiteralDfa6_0(active1, 0x10000L);
            case 116:
                if ((active1 & 0x200L) != 0L)
                    return jjStartNfaWithStates_0(5, 73, 10);
                else if ((active1 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(5, 83, 10);
                else if ((active1 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 89, 10);
                break;
            default:
                break;
        }
        return jjStartNfa_0(4, 0L, active1, 0L);
    }

    private final int jjMoveStringLiteralDfa6_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(4, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, 0L, active1, 0L);
            return 6;
        }
        switch (curChar) {
            case 117:
                return jjMoveStringLiteralDfa7_0(active1, 0x10000L);
            case 121:
                if ((active1 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(6, 76, 10);
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, 0L, active1, 0L);
    }

    private final int jjMoveStringLiteralDfa7_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(5, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, 0L, active1, 0L);
            return 7;
        }
        switch (curChar) {
            case 101:
                if ((active1 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(7, 80, 10);
                break;
            default:
                break;
        }
        return jjStartNfa_0(6, 0L, active1, 0L);
    }

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 78;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 78:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(5, 7);
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 96)
                                    kind = 96;
                                jjCheckNAddTwoStates(35, 36);
                            }
                            break;
                        case 79:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 91)
                                    kind = 91;
                                jjCheckNAdd(10);
                            } else if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 17;
                            else if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 14;
                            if (curChar == 34) {
                                if (kind > 105)
                                    kind = 105;
                            } else if (curChar == 39) {
                                if (kind > 104)
                                    kind = 104;
                            }
                            break;
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(8, 15);
                            else if ((0x2400L & l) != 0L) {
                                if (kind > 5)
                                    kind = 5;
                            } else if (curChar == 46)
                                jjCheckNAddTwoStates(35, 39);
                            else if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 17;
                            else if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 14;
                            else if (curChar == 35) {
                                if (kind > 16)
                                    kind = 16;
                                jjCheckNAdd(8);
                            }
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 93)
                                    kind = 93;
                                jjCheckNAddStates(16, 20);
                            } else if (curChar == 48) {
                                if (kind > 93)
                                    kind = 93;
                                jjCheckNAddStates(21, 26);
                            } else if (curChar == 34) {
                                if (kind > 105)
                                    kind = 105;
                            } else if (curChar == 39) {
                                if (kind > 104)
                                    kind = 104;
                            } else if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 1:
                            if (curChar == 10 && kind > 4)
                                kind = 4;
                            break;
                        case 2:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 3:
                            if ((0x2400L & l) != 0L && kind > 4)
                                kind = 4;
                            break;
                        case 4:
                            if (curChar == 10 && kind > 5)
                                kind = 5;
                            break;
                        case 5:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 6:
                            if ((0x2400L & l) != 0L && kind > 5)
                                kind = 5;
                            break;
                        case 7:
                            if (curChar != 35)
                                break;
                            if (kind > 16)
                                kind = 16;
                            jjCheckNAdd(8);
                            break;
                        case 8:
                            if ((0xffffffffffffdbffL & l) == 0L)
                                break;
                            if (kind > 16)
                                kind = 16;
                            jjCheckNAdd(8);
                            break;
                        case 10:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 91)
                                kind = 91;
                            jjCheckNAdd(10);
                            break;
                        case 11:
                            if (curChar == 39 && kind > 104)
                                kind = 104;
                            break;
                        case 12:
                            if (curChar == 34 && kind > 105)
                                kind = 105;
                            break;
                        case 13:
                            if (curChar == 39 && kind > 106)
                                kind = 106;
                            break;
                        case 14:
                            if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 15:
                            if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 14;
                            break;
                        case 16:
                            if (curChar == 34 && kind > 107)
                                kind = 107;
                            break;
                        case 17:
                            if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 16;
                            break;
                        case 18:
                            if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 17;
                            break;
                        case 19:
                            if ((0x3fe000000000000L & l) == 0L)
                                break;
                            if (kind > 93)
                                kind = 93;
                            jjCheckNAddStates(16, 20);
                            break;
                        case 20:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 93)
                                kind = 93;
                            jjCheckNAddTwoStates(20, 21);
                            break;
                        case 22:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(27, 29);
                            break;
                        case 25:
                            if (curChar != 48)
                                break;
                            if (kind > 93)
                                kind = 93;
                            jjCheckNAddStates(21, 26);
                            break;
                        case 27:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 94)
                                kind = 94;
                            jjAddStates(30, 31);
                            break;
                        case 29:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 95)
                                kind = 95;
                            jjCheckNAddTwoStates(29, 30);
                            break;
                        case 31:
                            if ((0x3fe000000000000L & l) != 0L)
                                jjCheckNAddStates(32, 34);
                            break;
                        case 32:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(32, 34);
                            break;
                        case 33:
                            if (curChar == 48)
                                jjCheckNAdd(24);
                            break;
                        case 34:
                            if (curChar == 46)
                                jjCheckNAddTwoStates(35, 39);
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 96)
                                kind = 96;
                            jjCheckNAddTwoStates(35, 36);
                            break;
                        case 37:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(38);
                            break;
                        case 38:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 96)
                                kind = 96;
                            jjCheckNAdd(38);
                            break;
                        case 39:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(5, 7);
                            break;
                        case 41:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(42);
                            break;
                        case 42:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(42, 24);
                            break;
                        case 45:
                            if (curChar == 39 && kind > 100)
                                kind = 100;
                            break;
                        case 47:
                            if (curChar == 34 && kind > 101)
                                kind = 101;
                            break;
                        case 49:
                            if (curChar == 39 && kind > 102)
                                kind = 102;
                            break;
                        case 50:
                            if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 49;
                            break;
                        case 51:
                            if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 50;
                            break;
                        case 53:
                            if (curChar == 34 && kind > 103)
                                kind = 103;
                            break;
                        case 54:
                            if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 53;
                            break;
                        case 55:
                            if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 54;
                            break;
                        case 57:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(8, 15);
                            break;
                        case 58:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(58, 59);
                            break;
                        case 59:
                            if (curChar != 46)
                                break;
                            if (kind > 96)
                                kind = 96;
                            jjCheckNAddTwoStates(60, 61);
                            break;
                        case 60:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 96)
                                kind = 96;
                            jjCheckNAddTwoStates(60, 61);
                            break;
                        case 62:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(63);
                            break;
                        case 63:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 96)
                                kind = 96;
                            jjCheckNAdd(63);
                            break;
                        case 64:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(64, 65);
                            break;
                        case 66:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(67);
                            break;
                        case 67:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 96)
                                kind = 96;
                            jjCheckNAdd(67);
                            break;
                        case 68:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(68, 69);
                            break;
                        case 70:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(71);
                            break;
                        case 71:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(71, 24);
                            break;
                        case 72:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(72, 73);
                            break;
                        case 73:
                            if (curChar == 46)
                                jjCheckNAddStates(35, 37);
                            break;
                        case 74:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(35, 37);
                            break;
                        case 76:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(77);
                            break;
                        case 77:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(77, 24);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 79:
                        case 10:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 91)
                                kind = 91;
                            jjCheckNAdd(10);
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 91)
                                    kind = 91;
                                jjCheckNAdd(10);
                            } else if (curChar == 92)
                                jjAddStates(3, 4);
                            if ((0x4000000040000L & l) != 0L)
                                jjAddStates(38, 41);
                            else if ((0x20000000200000L & l) != 0L)
                                jjCheckNAddStates(42, 49);
                            break;
                        case 8:
                            if (kind > 16)
                                kind = 16;
                            jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 9:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 91)
                                kind = 91;
                            jjCheckNAdd(10);
                            break;
                        case 21:
                            if ((0x100000001000L & l) != 0L && kind > 93)
                                kind = 93;
                            break;
                        case 23:
                            if ((0x100000001000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 24;
                            break;
                        case 24:
                            if ((0x40000000400L & l) != 0L && kind > 97)
                                kind = 97;
                            break;
                        case 26:
                            if ((0x100000001000000L & l) != 0L)
                                jjCheckNAdd(27);
                            break;
                        case 27:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 94)
                                kind = 94;
                            jjCheckNAddTwoStates(27, 28);
                            break;
                        case 28:
                            if ((0x100000001000L & l) != 0L && kind > 94)
                                kind = 94;
                            break;
                        case 30:
                            if ((0x100000001000L & l) != 0L && kind > 95)
                                kind = 95;
                            break;
                        case 36:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(50, 51);
                            break;
                        case 40:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(52, 53);
                            break;
                        case 43:
                            if ((0x20000000200000L & l) != 0L)
                                jjCheckNAddStates(42, 49);
                            break;
                        case 44:
                            if ((0x4000000040000L & l) != 0L)
                                jjCheckNAdd(45);
                            break;
                        case 46:
                            if ((0x4000000040000L & l) != 0L)
                                jjCheckNAdd(47);
                            break;
                        case 48:
                            if ((0x4000000040000L & l) != 0L)
                                jjCheckNAdd(51);
                            break;
                        case 52:
                            if ((0x4000000040000L & l) != 0L)
                                jjCheckNAdd(55);
                            break;
                        case 56:
                            if ((0x4000000040000L & l) != 0L)
                                jjAddStates(38, 41);
                            break;
                        case 61:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(54, 55);
                            break;
                        case 65:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(56, 57);
                            break;
                        case 69:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(58, 59);
                            break;
                        case 75:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(60, 61);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 8:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 16)
                                kind = 16;
                            jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active1 & 0x400000000000L) != 0L) {
                    jjmatchedKind = 133;
                    return -1;
                }
                return -1;
            case 1:
                if ((active1 & 0x400000000000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 133;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_9(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2), pos + 1);
    }

    private final int jjStartNfaWithStates_9(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_9(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_9() {
        switch (curChar) {
            case 10:
                return jjStopAtPos(0, 131);
            case 13:
                jjmatchedKind = 132;
                return jjMoveStringLiteralDfa1_9(0x0L, 0x4L);
            case 39:
                return jjMoveStringLiteralDfa1_9(0x400000000000L, 0x0L);
            default:
                return jjMoveNfa_9(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_9(long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_9(0, 0L, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active2 & 0x4L) != 0L)
                    return jjStopAtPos(1, 130);
                break;
            case 39:
                return jjMoveStringLiteralDfa2_9(active1, 0x400000000000L, active2, 0L);
            default:
                break;
        }
        return jjStartNfa_9(0, 0L, active1, active2);
    }

    private final int jjMoveStringLiteralDfa2_9(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_9(0, 0L, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_9(1, 0L, active1, 0L);
            return 2;
        }
        switch (curChar) {
            case 39:
                if ((active1 & 0x400000000000L) != 0L)
                    return jjStopAtPos(2, 110);
                break;
            default:
                break;
        }
        return jjStartNfa_9(1, 0L, active1, 0L);
    }

    private final int jjMoveNfa_9(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 133)
                                kind = 133;
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 2:
                            if (kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 133)
                                kind = 133;
                            break;
                        case 2:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 134)
                                kind = 134;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_2() {
        return jjMoveNfa_2(0, 0);
    }

    private final int jjMoveNfa_2(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 1;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L)
                                kind = 7;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private final int jjMoveNfa_1(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 1;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L)
                                kind = 6;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active1 & 0x10000000000000L) != 0L) {
                    jjmatchedKind = 128;
                    return 2;
                }
                return -1;
            case 1:
                if ((active1 & 0x10000000000000L) != 0L) {
                    jjmatchedKind = 117;
                    jjmatchedPos = 1;
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_7(int pos, long active0, long active1) {
        return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
    }

    private final int jjStartNfaWithStates_7(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_7(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_7() {
        switch (curChar) {
            case 39:
                return jjStopAtPos(0, 108);
            case 92:
                return jjMoveStringLiteralDfa1_7(0x10000000000000L);
            default:
                return jjMoveNfa_7(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_7(long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_7(0, 0L, active1);
            return 1;
        }
        switch (curChar) {
            case 13:
                return jjMoveStringLiteralDfa2_7(active1, 0x10000000000000L);
            default:
                break;
        }
        return jjStartNfa_7(0, 0L, active1);
    }

    private final int jjMoveStringLiteralDfa2_7(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_7(0, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_7(1, 0L, active1);
            return 2;
        }
        switch (curChar) {
            case 10:
                if ((active1 & 0x10000000000000L) != 0L)
                    return jjStopAtPos(2, 116);
                break;
            default:
                break;
        }
        return jjStartNfa_7(1, 0L, active1);
    }

    private final int jjMoveNfa_7(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 4;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L && kind > 128)
                                kind = 128;
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 117)
                                    kind = 117;
                            } else if (curChar == 39) {
                                if (kind > 128)
                                    kind = 128;
                            }
                            break;
                        case 3:
                            if (curChar == 39 && kind > 128)
                                kind = 128;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 128)
                                kind = 128;
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        case 2:
                            if (curChar == 92 && kind > 128)
                                kind = 128;
                            break;
                        case 1:
                            if (curChar == 92)
                                jjAddStates(3, 4);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 128)
                                kind = 128;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 4, 6, 7, 2, 3, 39, 40, 24, 58, 59, 64, 65, 68, 69, 72, 73, 20, 21, 22, 23, 24,
            26, 29, 30, 31, 33, 24, 22, 23, 24, 27, 28, 32, 23, 24, 74, 75, 24, 11, 12, 15, 18, 44, 45, 46, 47, 48, 51,
            52, 55, 37, 38, 41, 42, 62, 63, 66, 67, 70, 71, 76, 77, };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, "\74\111\116\104\105\116\124\76", null, null, "\50", "\51", "\173", "\175", "\133",
            "\135", "\73", "\54", "\56", "\72", "\53", "\55", "\52", "\57", "\57\57", "\52\52", "\74\74", "\76\76",
            "\45", "\176", "\136", "\174", "\46", "\75", "\76", "\74", "\75\75", "\74\75", "\76\75", "\74\76",
            "\41\75", "\53\75", "\55\75", "\52\75", "\57\75", "\57\57\75", "\45\75", "\46\75", "\174\75", "\136\75",
            "\74\74\75", "\76\76\75", "\52\52\75", "\157\162", "\141\156\144", "\156\157\164", "\151\163", "\151\156",
            "\154\141\155\142\144\141", "\151\146", "\145\154\163\145", "\145\154\151\146", "\167\150\151\154\145",
            "\146\157\162", "\164\162\171", "\145\170\143\145\160\164", "\144\145\146", "\143\154\141\163\163",
            "\146\151\156\141\154\154\171", "\160\162\151\156\164", "\160\141\163\163", "\142\162\145\141\153",
            "\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", "\171\151\145\154\144",
            "\151\155\160\157\162\164", "\146\162\157\155", "\144\145\154", "\162\141\151\163\145",
            "\147\154\157\142\141\154", "\145\170\145\143", "\141\163\163\145\162\164", "\141\163", null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, "\140", };
    public static final String[] lexStateNames = { "DEFAULT", "FORCE_NEWLINE1", "FORCE_NEWLINE2",
            "MAYBE_FORCE_NEWLINE_IF_EOF", "INDENTING", "INDENTATION_UNCHANGED", "UNREACHABLE", "IN_STRING11",
            "IN_STRING21", "IN_STRING13", "IN_STRING23", "IN_USTRING11", "IN_USTRING21", "IN_USTRING13",
            "IN_USTRING23", "IN_STRING1NLC", "IN_STRING2NLC", "IN_USTRING1NLC", "IN_USTRING2NLC", };
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 5, 4, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            11, 12, 13, 14, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 16, 16, 17, 17, 18, 18, 7, 8, 11, 12, -1, -1,
            -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0xfffffffffffcc0c1L, 0xff003efffffffL, 0x80L, };
    static final long[] jjtoSkip = { 0x33f3eL, 0x0L, 0x0L, };
    static final long[] jjtoSpecial = { 0x30000L, 0x0L, 0x0L, };
    static final long[] jjtoMore = { 0x0L, 0xfff00ff000000000L, 0x7fL, };
    protected CharStream input_stream;
    private final int[] jjrounds = new int[78];
    private final int[] jjstateSet = new int[156];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;

    public PythonGrammarTokenManager(CharStream stream) {
        input_stream = stream;
    }

    public PythonGrammarTokenManager(CharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(CharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 78; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(CharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 19 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        if (jjmatchedPos < 0) {
            if (image == null)
                t.image = "";
            else
                t.image = image.toString();
            t.beginLine = t.endLine = input_stream.getBeginLine();
            t.beginColumn = t.endColumn = input_stream.getBeginColumn();
        } else {
            String im = jjstrLiteralImages[jjmatchedKind];
            t.image = (im == null) ? input_stream.GetImage() : im;
            t.beginLine = input_stream.getBeginLine();
            t.beginColumn = input_stream.getBeginColumn();
            t.endLine = input_stream.getEndLine();
            t.endColumn = input_stream.getEndColumn();
        }
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                CommonTokenAction(matchedToken);
                return matchedToken;
            }
            image = null;
            jjimageLen = 0;

            for (;;) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (java.io.IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        break;
                    case 2:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        break;
                    case 3:
                        jjmatchedKind = 8;
                        jjmatchedPos = -1;
                        curPos = 0;
                        curPos = jjMoveStringLiteralDfa0_3();
                        break;
                    case 4:
                        jjmatchedKind = 14;
                        jjmatchedPos = -1;
                        curPos = 0;
                        curPos = jjMoveStringLiteralDfa0_4();
                        break;
                    case 5:
                        jjmatchedKind = 13;
                        jjmatchedPos = -1;
                        curPos = 0;
                        curPos = jjMoveStringLiteralDfa0_5();
                        break;
                    case 6:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_6();
                        break;
                    case 7:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_7();
                        break;
                    case 8:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_8();
                        break;
                    case 9:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_9();
                        break;
                    case 10:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_10();
                        break;
                    case 11:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_11();
                        break;
                    case 12:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_12();
                        break;
                    case 13:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_13();
                        break;
                    case 14:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_14();
                        break;
                    case 15:
                        jjmatchedKind = 124;
                        jjmatchedPos = -1;
                        curPos = 0;
                        curPos = jjMoveStringLiteralDfa0_15();
                        break;
                    case 16:
                        jjmatchedKind = 125;
                        jjmatchedPos = -1;
                        curPos = 0;
                        curPos = jjMoveStringLiteralDfa0_16();
                        break;
                    case 17:
                        jjmatchedKind = 126;
                        jjmatchedPos = -1;
                        curPos = 0;
                        curPos = jjMoveStringLiteralDfa0_17();
                        break;
                    case 18:
                        jjmatchedKind = 127;
                        jjmatchedPos = -1;
                        curPos = 0;
                        curPos = jjMoveStringLiteralDfa0_18();
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        TokenLexicalActions(matchedToken);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        CommonTokenAction(matchedToken);
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null)
                                specialToken = matchedToken;
                            else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else
                            SkipLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    MoreLexicalActions();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                        TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    int[] jjemptyLineNo = new int[19];
    int[] jjemptyColNo = new int[19];
    boolean[] jjbeenHere = new boolean[19];

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 5:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                if (parens == 0) {
                    indent = 0;
                    input_stream.backup(1);
                    if (level == 0)
                        SwitchTo(FORCE_NEWLINE1);
                    else
                        SwitchTo(FORCE_NEWLINE2);
                }
                break;
            case 8:
                if (jjmatchedPos == -1) {
                    if (jjbeenHere[3] && jjemptyLineNo[3] == input_stream.getBeginLine()
                            && jjemptyColNo[3] == input_stream.getBeginColumn())
                        throw new TokenMgrError(
                                ("Error: Bailing out of infinite loop caused by repeated empty string matches at line "
                                        + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."),
                                TokenMgrError.LOOP_DETECTED);
                    jjemptyLineNo[3] = input_stream.getBeginLine();
                    jjemptyColNo[3] = input_stream.getBeginColumn();
                    jjbeenHere[3] = true;
                }
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                indenting(0);
                break;
            case 9:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                indenting((indent / 8 + 1) * 8);
                break;
            case 10:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                indenting(indent + 1);
                break;
            case 11:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                indenting(0);
                break;
            case 12:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                //System.out.println("empty line");
                // if partial single_input (interactive) mode,
                // empty line (indent==0), and no parens open
                // or indentetion expected (if stdprompt == true, ovveride last cond)
                // consider forcing sentence closing NEWLINE if EOF
                if (partial && single_input && indent == 0 && parens == 0 && (stdprompt || !expect_indent)) {
                    //System.out.println("force newline");
                    //backup a character!
                    // - input_stream.backup(1); -
                    SwitchTo(MAYBE_FORCE_NEWLINE_IF_EOF);
                } else
                    indenting(0);
                break;
            case 17:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                indenting(0);
                break;
            default:
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            case 116:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 3);
                break;
            case 117:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 2);
                break;
            case 118:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 3);
                break;
            case 119:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 2);
                break;
            case 120:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 3);
                break;
            case 121:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 2);
                break;
            case 122:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 3);
                break;
            case 123:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setLength(image.length() - 2);
                break;
            case 130:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                int l = image.length();
                image.setLength(l - 1);
                image.setCharAt(l - 2, '\n');
                break;
            case 132:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                image.setCharAt(image.length() - 1, '\n');
                break;
            default:
                break;
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 7:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.kind = NEWLINE;
                break;
            case 14:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                if (indent > indentation[level]) {
                    level++;
                    indentation[level] = indent;
                    matchedToken.kind = INDENT;
                    matchedToken.image = "<INDENT>";
                } else if (level > 0) {
                    Token t = matchedToken;
                    level -= 1;
                    while (level > 0 && indent < indentation[level]) {
                        level--;
                        t = addDedent(t);
                    }
                    if (indent != indentation[level]) {
                        throw new TokenMgrError("inconsistent dedent", t.endLine, t.endColumn);
                    }
                    t.next = null;
                }
                break;
            case 18:
                if (image == null)
                    image = new StringBuffer(jjstrLiteralImages[18]);
                else
                    image.append(jjstrLiteralImages[18]);
                parens++;
                break;
            case 19:
                if (image == null)
                    image = new StringBuffer(jjstrLiteralImages[19]);
                else
                    image.append(jjstrLiteralImages[19]);
                parens--;
                break;
            case 20:
                if (image == null)
                    image = new StringBuffer(jjstrLiteralImages[20]);
                else
                    image.append(jjstrLiteralImages[20]);
                parens++;
                break;
            case 21:
                if (image == null)
                    image = new StringBuffer(jjstrLiteralImages[21]);
                else
                    image.append(jjstrLiteralImages[21]);
                parens--;
                break;
            case 22:
                if (image == null)
                    image = new StringBuffer(jjstrLiteralImages[22]);
                else
                    image.append(jjstrLiteralImages[22]);
                parens++;
                break;
            case 23:
                if (image == null)
                    image = new StringBuffer(jjstrLiteralImages[23]);
                else
                    image.append(jjstrLiteralImages[23]);
                parens--;
                break;
            case 108:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            case 109:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            case 110:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            case 111:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            case 112:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            case 113:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            case 114:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            case 115:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen
                            + (lengthOfMatch = jjmatchedPos + 1))));
                else
                    image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.toString();
                break;
            default:
                break;
        }
    }
}
